#!/usr/bin/python3

import gmpy2
import optparse
import sys
import os
import subprocess
import re
import fileinput
import configparser

class NoPrimeError(Exception):
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return repr(self.value)

# scan single host
def scan_host_dhprime(server, port = 443, openssltrace = os.path.dirname(sys.argv[0])+"/openssl-trace"):
	ossl_out = subprocess.check_output([openssltrace,
		"s_client", "-trace",
		"-servername", server,
		"-cipher", "DHE",
		"-connect", server+":"+str(port)],
		stdin=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
	for line in ossl_out.decode("utf-8").splitlines():
		if 'dh_p' in line:
			return gmpy2.mpz(re.sub(".*: ", "", line), 16)
	
	throw 

# return prime classification function
def return_known_prime_checker(filename = os.path.dirname(sys.argv[0])+'/knownprimes.ini'):
	# read list of known primes
	config = configparser.ConfigParser()
	config.read(filename)

	def check_prime(prime):
		result = {
			'length': prime.bit_length(),
			'prime' : prime,
			'is_known_prime': False,
			'known_prime_name': None
		}
		for sect in config.sections():
			if config.get(sect, 'prime') == hex(prime):
				result['is_known_prime'] = True
				result['known_prime_name'] = sect

		if gmpy2.is_prime(prime):
			result['is_prime'] = True
		else:
			result['is_prime'] = False

		p12 = gmpy2.div(gmpy2.sub(prime, 1), 2)
		if gmpy2.is_prime(p12):
			result['safe_prime'] = True
		else:
			result['safe_prime'] = False

		return result

	return check_prime

prime_classify = return_known_prime_checker()

# iterate over all input lines and check hosts if found
for line in fileinput.input():
	# skip comments
	if line.strip().startswith('#'):
		continue

	hpc = line.split(None, 2)
	# skip empty lines
	if len(hpc) < 1:
		continue
	comment = '' if len(hpc) < 3 else hpc[2]
	port = 443 if len(hpc) < 2 else hpc[1]
	host = hpc[0]

	prime = scan_host_dhprime(host, port)
	prime_attrs = prime_classify(prime)
